{"version":3,"sources":["routes.js","Navigation.js","solitaire-rl/utils.mjs","solitaire-rl/solitaire-env.mjs","solitaire-rl/rl.mjs","Board.js","ManualPlayView.js","AgentPlayView.js","customHooks.js","TrainingView.js","Version.js","App.js","reportWebVitals.js","index.js"],"names":["ROUTES","Navigation","className","to","activeClassName","rangeIter","range","n","Array","from","keys","index","fst","pair","mean","xs","count","length","reduce","acc","x","formatElapsedTime","ms","s","mm","Math","floor","toString","padStart","ss","randomChoice","random","iterLocations","iterActions","DIRECTIONS","Location","row","col","sameAs","other","key","this","_row","_col","_key","fromKey","split","map","Number","Action","fromLocation","viaLocation","toLocation","_fromLocation","_viaLocation","_toLocation","followDirection","location","direction","Error","numRows","boardShape","numCols","U","f","LOCATIONS","LOCATIONS_MAP","has","CENTRE","Map","ACTIONS","Board","boardState","_boardState","get","l","filter","actionIndex","isValidAction","action","newBoardState","set","entries","locationKey","isOccupied","validActions","values","observationToBoard","obs","i","Boolean","boardToObservation","board","EMPTY_INFO","SolitaireEnv","reset","_board","step","done","makeMove","_calculateFinalReward","undo","undoMove","render","line","console","log","reward","abs","solved","tf","ready","setBackend","tfConfigure","makeModel","kernelInitializer","initializers","randomUniform","minval","maxval","model","sequential","add","layers","dense","inputShape","units","activation","name","summaryLines","summary","undefined","summaryLine","push","join","makeLinearDecaySchedule","startVal","endVal","decayEpisodes","increment","episode","evaluateValidActions","state","tidy","currentBoard","nextStates","newBoard","ys","len","min","predict","tensor","dataSync","bestPairBy","pairs","fn","pairsHead","bestPair","makePolicy","epsilon","checkEndCondition","endCondition","env","actions","agent","makeTrainedAgentFromModel","JSON","stringify","checkEndCondition1","repeat","every","initialAction","checkEndCondition2","trainLoop","pi","callbacks","optimizer","train","sgd","lossFn","losses","meanSquaredError","finalRewards","bestFinalReward","NEGATIVE_INFINITY","bestFinalRewardMA","epsilonDecaySchedule","nextStateValue","nextState","target","stateLocal","minimize","stateTensor","expandDims","stateValueTensor","apply","squeeze","targetTensor","finalReward","finalRewardMA","slice","stats","progress","dispose","trainingSuccess","checkCancelled","nextFrame","trainingFailure","BaseAgent","_env","_state","chooseAction","RandomAgent","HardcodedActionsAgent","_actions","_index","TrainedAgent","options","_options","_isInitialMove","_pi","makeTrainedAgentFromModelPath","modelPath","loadLayersModel","memory","GRID_X","GRID_Y","HOLE_RADIUS","MARBLE_RADIUS","MARBLE_HIGHLIGHT_RADIUS","makeRandomRotationKvp","makeRandomRotationsMap","rl","makeTransformStyle","angle","makeTransformOriginStyle","cx","cy","resetBoard","interactive","validateManualMove","makeManualMove","useState","randomRotations","setRandomRotations","showViaMarble","setShowViaMarble","selectedMarble","setSelectedMarble","selectedHole","setSelectedHole","availableHoles","setAvailableHoles","useEffect","onSelectHole","find","availableHole","validActionIndices","onMouseOverHole","onMouseOutHole","onSelectMarble","validActionIndex","locationToCircleCentre","renderStaticMarble","props","r","onClick","style","transform","transformOrigin","renderFromToMarble","startLocation","endLocation","cxFrom","cyFrom","cxTo","cyTo","angleFrom","angleTo","config","duration","springProps","viewBox","id","height","width","patternContentUnits","href","preserveAspectRatio","classNames","onMouseOver","onMouseOut","maybeOnClick","delay","opacity","onRest","renderViaMarble","renderMarbleHighlight","ManualPlayView","setResetBoard","setEntries","setAction","setUndo","setActions","setFinalReward","onReset","useCallback","fromLocationCheck","toLocationCheck","concat","type","disabled","AgentPlayView","query","URLSearchParams","useLocation","search","selectedAgent","setSelectedAgent","setAgent","running","setRunning","fetchingModel","setFetchingModel","errorMessage","setErrorMessage","runTimerRef","useRef","clearInterval","current","makeAgent","onStep","stepResult","agentName","a","message","value","onChange","e","setInterval","Alert","transition","variant","dismissible","onClose","useCallbackWrapper","cb","cbRef","TrainingView","selectedEndCondition","setSelectedEndCondition","training","setTraining","trainingOutcome","setTrainingOutcome","cancelled","setCancelled","setStats","chartVisible","setChartVisible","movingAverageAvailable","setMovingAverageAvailable","showBoard","setShowBoard","chartElementRef","chartValuesRef","start","setStart","elapsed","setElapsed","now","performance","useElapsedTime","elapsedTime","updateTimer","resetTimer","prevTime","setPrevTime","frameCount","setFrameCount","fps","setFps","newFrameCount","delta","usePerSecondCounter","eps","updateEps","resetEps","onTrainingSuccessCallbackWrapper","agentActions","onTrainingFailureCallbackWrapper","onProgressCallbackWrapper","onCheckCancelledCallbackWrapper","lastValues","bestValues","y","data","series","tfvis","linechart","zoomToFit","xLabel","yLabel","seriesColors","showChart","onTrain","Table","getBackgroundClass","size","toFixed","ref","Version","version","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfb3558f.chunk.js","sourcesContent":["export const ROUTES = {\n  home: '/',\n  manualPlayView: '/manual-play',\n  agentPlayView: '/agent-play',\n  trainingView: '/training',\n}\n","import { NavLink } from 'react-router-dom'\nimport { ROUTES } from './routes'\nimport './Navigation.css'\n\nconst Navigation = () => {\n  return (\n    <div className=\"navigation\">\n      <ul>\n        <li>\n          <NavLink to={ROUTES.manualPlayView} activeClassName=\"navigation-link--active\">Manual Play</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.agentPlayView} activeClassName=\"navigation-link--active\">Agent Play</NavLink>\n        </li>\n        <li>\n          <NavLink to={ROUTES.trainingView} activeClassName=\"navigation-link--active\">Training</NavLink>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Navigation\n","export const range = n => Array.from(Array(n).keys())\n\nexport function* rangeIter(n) {\n  for (let index = 0; index < n; index++) {\n    yield index\n  }\n}\n\nexport const zip = (xs, ys) => {\n  const len = Math.min(xs.length, ys.length)\n  return range(len).map(index => [xs[index], ys[index]])\n}\n\nexport const fst = pair => pair[0]\nexport const snd = pair => pair[1]\n\nexport const padInt = (n, w) => n.toString().padStart(w)\nexport const padReal = (n, f, w) => w ? n.toFixed(f).padStart(w) : n.toFixed(f)\n\nexport const moveToLast = (xs, predicate) => {\n  const index = xs.findIndex(predicate)\n  if (index >= 0) {\n    const [x] = xs.splice(index, 1)\n    xs.splice(xs.length, 0, x)\n  }\n}\n\nexport const mean = xs => {\n  const count = xs.length\n  const sum = xs.reduce((acc, x) => acc + x, 0)\n  return sum / count\n}\n\nexport const formatElapsedTime = ms => {\n  const s = ms / 1000\n  const mm = Math.floor(s / 60).toString().padStart(2, '0')\n  const ss = Math.floor(s % 60).toString().padStart(2, '0')\n  return `${mm}:${ss}`\n}\n\nexport const randomChoice = xs =>\n  xs[Math.floor(Math.random() * xs.length)]\n","import * as U from './utils.mjs'\n\nconst UP = 0\nconst DOWN = 1\nconst LEFT = 2\nconst RIGHT = 3\nconst DIRECTIONS = [UP, DOWN, LEFT, RIGHT]\n\nclass Location {\n  constructor(row, col) {\n    this._row = row\n    this._col = col\n    this._key = `${row}:${col}`\n  }\n\n  get row() { return this._row }\n  get col() { return this._col }\n  get key() { return this._key }\n\n  sameAs = other => this.key === other.key\n\n  static fromKey = key => {\n    const [row, col] = key.split(':').map(Number)\n    return new Location(row, col)\n  }\n}\n\nclass Action {\n  constructor(fromLocation, viaLocation, toLocation) {\n    this._fromLocation = fromLocation\n    this._viaLocation = viaLocation\n    this._toLocation = toLocation\n  }\n\n  get fromLocation() { return this._fromLocation }\n  get viaLocation() { return this._viaLocation }\n  get toLocation() { return this._toLocation }\n}\n\nconst followDirection = (location, direction) => {\n  const { row, col } = location\n  switch (direction) {\n    case UP: return new Location(row - 1, col)\n    case DOWN: return new Location(row + 1, col)\n    case LEFT: return new Location(row, col - 1)\n    case RIGHT: return new Location(row, col + 1)\n    default: throw new Error(`Unknown direction ${direction}`)\n  }\n}\n\nfunction* iterLocations() {\n  const boardShape = [\n    '  XXX  ',\n    '  XXX  ',\n    'XXXXXXX',\n    'XXXXXXX',\n    'XXXXXXX',\n    '  XXX  ',\n    '  XXX  ',\n  ]\n  const numRows = boardShape.length\n  const numCols = boardShape[0].length\n  for (const row of U.rangeIter(numRows)) {\n    for (const col of U.rangeIter(numCols)) {\n      if (boardShape[row][col] === 'X') {\n        yield new Location(row, col)\n      }\n    }\n  }\n}\n\nfunction* iterActions() {\n  for (const fromLocation of LOCATIONS) {\n    for (const direction of DIRECTIONS) {\n      const viaLocation = followDirection(fromLocation, direction)\n      const toLocation = followDirection(viaLocation, direction)\n      if (LOCATIONS_MAP.has(viaLocation.key) && LOCATIONS_MAP.has(toLocation.key)) {\n        yield new Action(fromLocation, viaLocation, toLocation)\n      }\n    }\n  }\n}\n\nconst CENTRE = new Location(3, 3)\nexport const LOCATIONS = Array.from(iterLocations())\nconst LOCATIONS_MAP = new Map(LOCATIONS.map(location => [location.key, location]))\nexport const ACTIONS = Array.from(iterActions())\n\nexport class Board {\n  constructor(boardState) {\n    if (boardState) {\n      this._boardState = new Map(boardState)\n    } else {\n      this._boardState = new Map(LOCATIONS.map(l => [l.key, !l.sameAs(CENTRE)]))\n    }\n  }\n\n  get done() {\n    return this.validActions().length === 0\n  }\n\n  get solved() {\n    const remainingPieceCount = Array.from(this._boardState.values())\n      .filter(isOccupied => isOccupied)\n      .length\n    return remainingPieceCount === 1 && this.location(CENTRE)\n  }\n\n  validActions() {\n    const actionIndices = U.range(ACTIONS.length)\n    return actionIndices.filter(actionIndex => this.isValidAction(actionIndex))\n  }\n\n  isValidAction(actionIndex) {\n    const action = ACTIONS[actionIndex]\n    const { fromLocation, viaLocation, toLocation } = action\n    return (\n      this._boardState.get(fromLocation.key) &&\n      this._boardState.get(viaLocation.key) &&\n      !this._boardState.get(toLocation.key)\n    )\n  }\n\n  makeMove(actionIndex) {\n    const action = ACTIONS[actionIndex]\n    const { fromLocation, viaLocation, toLocation } = action\n    const newBoardState = new Map(this._boardState)\n    newBoardState.set(fromLocation.key, false)\n    newBoardState.set(viaLocation.key, false)\n    newBoardState.set(toLocation.key, true)\n    return new Board(newBoardState)\n  }\n\n  undoMove(actionIndex) {\n    const action = ACTIONS[actionIndex]\n    const { fromLocation, viaLocation, toLocation } = action\n    const newBoardState = new Map(this._boardState)\n    newBoardState.set(fromLocation.key, true)\n    newBoardState.set(viaLocation.key, true)\n    newBoardState.set(toLocation.key, false)\n    return new Board(newBoardState)\n  }\n\n  location = location => this._boardState.get(location.key)\n\n  entries() {\n    return Array.from(this._boardState.entries())\n      .map(([locationKey, isOccupied]) => [LOCATIONS_MAP.get(locationKey), isOccupied])\n  }\n}\n\nexport const observationToBoard = obs => {\n  const boardState = new Map(LOCATIONS.map((l, i) => [l.key, Boolean(obs[i])]))\n  return new Board(boardState)\n}\n\nexport const boardToObservation = board => {\n  return LOCATIONS.map(l => Number(board.location(l)))\n}\n\nconst EMPTY_INFO = {}\n\nexport class SolitaireEnv {\n  constructor() {\n    this._board = new Board()\n  }\n\n  get done() {\n    return this._board.done\n  }\n\n  get solved() {\n    return this._board.solved\n  }\n\n  reset = () => {\n    this._board = new Board()\n    return boardToObservation(this._board)\n  }\n\n  step = actionIndex => {\n    if (this._board.done) {\n      const obs = boardToObservation(this._board)\n      return [obs, 0, true, EMPTY_INFO]\n    }\n    if (!this._board.isValidAction(actionIndex)) {\n      const obs = boardToObservation(this._board)\n      return [obs, -100, false, EMPTY_INFO]\n    }\n    this._board = this._board.makeMove(actionIndex)\n    const obs = boardToObservation(this._board)\n    const done = this._board.done\n    const reward = done ? this._calculateFinalReward() : 0\n    return [obs, reward, done, EMPTY_INFO]\n  }\n\n  undo = actionIndex => {\n    this._board = this._board.undoMove(actionIndex)\n    const obs = boardToObservation(this._board)\n    return obs\n  }\n\n  validActions() {\n    return this._board.validActions()\n  }\n\n  entries() {\n    return this._board.entries()\n  }\n\n  render = () => {\n    for (const row of U.rangeIter(7)) {\n      let line = ''\n      for (const col of U.rangeIter(7)) {\n        const location = new Location(row, col)\n        if (LOCATIONS_MAP.has(location.key)) {\n          line += this._board.location(location) ? 'X' : '.'\n        } else {\n          line += ' '\n        }\n      }\n      console.log(line)\n    }\n  }\n\n  _calculateFinalReward = () => {\n    let reward = 0\n    for (const [location, isOccupied] of this._board.entries()) {\n      if (isOccupied) {\n        const { row, col } = location\n        const rowDiff = Math.abs(row - CENTRE.row)\n        const colDiff = Math.abs(col - CENTRE.col)\n        const manhattanDistanceFromCentre = rowDiff + colDiff\n        reward -= manhattanDistanceFromCentre\n      }\n    }\n    return reward\n  }\n}\n","import tf from '@tensorflow/tfjs'\nimport { SolitaireEnv, observationToBoard, boardToObservation, Board, ACTIONS } from './solitaire-env.mjs'\nimport * as U from './utils.mjs'\n\nconst tfConfigure = async () => {\n  await tf.ready()\n  await tf.setBackend('cpu')\n}\n\ntfConfigure()\n\nconst MAX_EPISODES = 10000\nconst LR = 0.001\nconst EPSILON_START = 0.5\nconst EPSILON_END = 0.01\nconst EPSILON_DECAY_EPISODES = 5000\nconst GAMMA = 1\n\nconst makeModel = () => {\n  const kernelInitializer = tf.initializers.randomUniform({ minval: -0.5, maxval: +0.5 })\n  const model = tf.sequential()\n  model.add(tf.layers.dense({ inputShape: [33], units: 10, activation: 'tanh', name: 'input-layer', kernelInitializer }))\n  model.add(tf.layers.dense({ units: 1, name: 'output-layer', kernelInitializer }))\n\n  const summaryLines = []\n  model.summary(undefined, undefined, summaryLine => summaryLines.push(summaryLine))\n  console.log(summaryLines.join('\\n'))\n\n  return model\n}\n\nconst makeLinearDecaySchedule = (startVal, endVal, decayEpisodes) => {\n  const rangeVal = endVal - startVal\n  const increment = rangeVal / decayEpisodes\n  return episode => episode > decayEpisodes\n    ? endVal\n    : startVal + increment * episode\n}\n\nconst evaluateValidActions = (model, state) => {\n  return tf.tidy(() => {\n    const currentBoard = observationToBoard(state)\n    const evaluateValidAction = action => {\n      const newBoard = currentBoard.makeMove(action)\n      const nextState = boardToObservation(newBoard)\n      return nextState\n    }\n    const validActions = currentBoard.validActions()\n    const nextStates = validActions.map(evaluateValidAction)\n    const nextStateValues = model.predict(tf.tensor(nextStates))\n    return U.zip(nextStateValues.dataSync(), validActions)\n  })\n}\n\nconst bestPairBy = (pairs, fn) => {\n  const [pairsHead, ...pairsTail] = pairs\n  return pairsTail.reduce(\n    (bestPair, pair) => fn(pair) > fn(bestPair) ? pair : bestPair,\n    pairsHead)\n}\n\nconst makePolicy = model => {\n  return (s, epsilon = 0) => {\n    const pairs = evaluateValidActions(model, s)\n    if (Math.random() < epsilon) {\n      return U.randomChoice(pairs)\n    } else {\n      return bestPairBy(pairs, U.fst)\n    }\n  }\n}\n\nconst checkEndCondition1 = model => {\n  const actions = []\n  const agent = makeTrainedAgentFromModel(model)\n  while (!agent.done) {\n    const { actionIndex } = agent.step()\n    actions.push(actionIndex)\n  }\n  const solved = agent.solved\n  console.log(`[checkEndCondition1] actions (${actions.length}): ${JSON.stringify(actions)}; solved: ${solved}`)\n  return solved\n}\n\nconst checkEndCondition2 = model => {\n  console.log(`[checkEndCondition2] ${'-'.repeat(20)} START ${'-'.repeat(20)}`)\n  const board = new Board()\n  const initialActions = board.validActions()\n  return initialActions.every(initialAction => {\n    const actions = []\n    const agent = makeTrainedAgentFromModel(model, { initialAction })\n    while (!agent.done) {\n      const { actionIndex } = agent.step()\n      actions.push(actionIndex)\n    }\n    const solved = agent.solved\n    console.log(`[checkEndCondition2] actions (${actions.length}): ${JSON.stringify(actions)}; solved: ${solved}`)\n    return solved\n  })\n}\n\nconst checkEndCondition = (endCondition, model, env) => {\n  switch (endCondition) {\n\n    case 'endCondition0':\n      return env.solved\n\n    case 'endCondition1':\n    default:\n      return env.solved && checkEndCondition1(model)\n\n    case 'endCondition2':\n      return env.solved && checkEndCondition2(model)\n  }\n}\n\nconst trainLoop = async (env, model, pi, endCondition, callbacks) => {\n  const optimizer = tf.train.sgd(LR)\n  const lossFn = tf.losses.meanSquaredError\n  const finalRewards = []\n  let bestFinalReward = Number.NEGATIVE_INFINITY\n  let bestFinalRewardMA = Number.NEGATIVE_INFINITY\n  const epsilonDecaySchedule = makeLinearDecaySchedule(EPSILON_START, EPSILON_END, EPSILON_DECAY_EPISODES)\n  for (const episode of U.rangeIter(MAX_EPISODES)) {\n    const epsilon = epsilonDecaySchedule(episode)\n    let state = env.reset()\n    const actions = []\n    for (; ;) {\n      const [nextStateValue, action] = pi(state, epsilon)\n      actions.push(action)\n      const [nextState, reward, done] = env.step(action)\n      const target = reward + (1 - done) * GAMMA * nextStateValue\n      const stateLocal = state\n      optimizer.minimize(() => tf.tidy(() => {\n        const stateTensor = tf.tensor(stateLocal).expandDims(0)\n        const stateValueTensor = model.apply(stateTensor).squeeze(-1)\n        const targetTensor = tf.tensor(target).expandDims(0)\n        const loss = lossFn(stateValueTensor, targetTensor)\n        return loss\n      }))\n      state = nextState\n\n      if (done) {\n        const finalReward = reward\n        finalRewards.push(finalReward)\n        if (finalReward > bestFinalReward) {\n          bestFinalReward = finalReward\n        }\n        let finalRewardMA = Number.NEGATIVE_INFINITY\n        if (finalRewards.length >= 100) {\n          finalRewardMA = U.mean(finalRewards.slice(-100))\n          if (finalRewardMA > bestFinalRewardMA) {\n            bestFinalRewardMA = finalRewardMA\n          }\n        }\n\n        const stats = {\n          episode: episode + 1,\n          epsilon,\n          finalReward,\n          bestFinalReward,\n          finalRewardMA,\n          bestFinalRewardMA,\n          actions\n        }\n        callbacks.progress(stats)\n\n        if (checkEndCondition(endCondition, model, env)) {\n          optimizer.dispose()\n          return callbacks.trainingSuccess(model, actions)\n        }\n\n        if (callbacks.checkCancelled()) {\n          optimizer.dispose()\n          return\n        }\n\n        await tf.nextFrame()\n        break\n      }\n    }\n  }\n\n  callbacks.trainingFailure(model)\n  optimizer.dispose()\n}\n\nclass BaseAgent {\n  constructor() {\n    this._env = new SolitaireEnv()\n    this._state = this._env.reset()\n  }\n\n  get done() {\n    return this._env.done\n  }\n\n  get solved() {\n    return this._env.solved\n  }\n\n  reset() {\n    this._state = this._env.reset()\n    return this._state\n  }\n\n  step() {\n    if (this.done) {\n      throw new Error('This episode is done - call reset to go again')\n    }\n\n    const actionIndex = this.chooseAction()\n    const action = ACTIONS[actionIndex]\n\n    const [state, reward, done] = this._env.step(actionIndex)\n    this._state = state\n    const entries = this._env.entries()\n    return { state, reward, done, entries, action, actionIndex }\n  }\n\n  chooseAction() {\n    throw new Error('Derived classes must override BaseAgent#chooseAction')\n  }\n\n  entries() {\n    return this._env.entries()\n  }\n}\n\nclass RandomAgent extends BaseAgent {\n  chooseAction() {\n    const board = observationToBoard(this._state)\n    const validActions = board.validActions()\n    const action = U.randomChoice(validActions)\n    return action\n  }\n}\n\nclass HardcodedActionsAgent extends BaseAgent {\n  constructor(actions) {\n    super()\n    this._actions = actions\n    this._index = 0\n  }\n\n  chooseAction() {\n    return this._actions[this._index++]\n  }\n\n  reset() {\n    super.reset()\n    this._index = 0\n  }\n}\n\nclass TrainedAgent extends BaseAgent {\n  constructor(model, options) {\n    super()\n    this._options = options || {}\n    this._isInitialMove = true\n    this._pi = makePolicy(model)\n  }\n\n  chooseAction() {\n    if (this._isInitialMove && this._options.initialAction !== undefined) {\n      const action = this._options.initialAction\n      this._isInitialMove = false\n      return action\n    }\n    const [, action] = this._pi(this._state)\n    this._isInitialMove = false\n    return action\n  }\n\n  reset() {\n    super.reset()\n    this._isInitialMove = true\n  }\n}\n\nexport const makeRandomAgent = () =>\n  new RandomAgent()\n\nexport const makeHardcodedActionsAgent = actions =>\n  new HardcodedActionsAgent(actions)\n\nexport const makeTrainedAgentFromModel = (model, options) =>\n  new TrainedAgent(model, options)\n\nexport const makeTrainedAgentFromModelPath = async (modelPath, options) => {\n  const model = await tf.loadLayersModel(modelPath)\n  return makeTrainedAgentFromModel(model, options)\n}\n\nexport const train = async (endCondition, callbacks) => {\n  console.log(JSON.stringify(tf.memory()))\n  const env = new SolitaireEnv()\n  const model = makeModel()\n  const pi = makePolicy(model)\n  await trainLoop(env, model, pi, endCondition, callbacks)\n  model.dispose()\n  console.log(JSON.stringify(tf.memory()))\n}\n","import { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Spring } from 'react-spring/renderprops.cjs'\nimport * as rl from './solitaire-rl/index.mjs'\nimport './Board.css'\n\nconst GRID_X = 100 / 8\nconst GRID_Y = 100 / 8\nconst HOLE_RADIUS = Math.min(GRID_X, GRID_Y) / 4\nconst MARBLE_RADIUS = Math.min(GRID_X, GRID_Y) / 1.5\nconst MARBLE_HIGHLIGHT_RADIUS = Math.min(GRID_X, GRID_Y) / 2.15\n\nconst makeRandomRotation = () => Math.random() * 60 - 30\nconst makeRandomRotationKvp = location => [location.key, makeRandomRotation()]\nconst makeRandomRotationKvps = () => rl.LOCATIONS.map(makeRandomRotationKvp)\nconst makeRandomRotationsMap = () => new Map(makeRandomRotationKvps())\n\nconst makeTransformStyle = angle => `rotate(${angle}deg)`\nconst makeTransformOriginStyle = (cx, cy) => `${cx}% ${cy}%`\n\nconst Board = ({\n  resetBoard,\n  entries,\n  action,\n  undo,\n  interactive,\n  validateManualMove,\n  makeManualMove\n}) => {\n  const [randomRotations, setRandomRotations] = useState(() => makeRandomRotationsMap())\n  const [showViaMarble, setShowViaMarble] = useState(false)\n  const [selectedMarble, setSelectedMarble] = useState(null)\n  const [selectedHole, setSelectedHole] = useState(null)\n  const [availableHoles, setAvailableHoles] = useState([])\n\n  useEffect(() => {\n    if (resetBoard) {\n      setRandomRotations(makeRandomRotationsMap())\n    }\n  }, [entries, resetBoard])\n\n  useEffect(() => {\n    setShowViaMarble(Boolean(action))\n    setSelectedMarble(null)\n    setSelectedHole(null)\n    setAvailableHoles([])\n  }, [action, undo])\n\n  const onSelectHole = location => () => {\n    if (!interactive) return\n    if (availableHoles.find(availableHole => availableHole.sameAs(location))) {\n      const fromLocation = selectedMarble\n      const toLocation = location\n      const validActionIndices = validateManualMove({ fromLocation, toLocation })\n      if (validActionIndices.length === 1) {\n        makeManualMove(validActionIndices[0])\n      }\n    }\n  }\n\n  const onMouseOverHole = location => () => {\n    if (!interactive) return\n    if (availableHoles.find(availableHole => availableHole.sameAs(location))) {\n      setSelectedHole(location)\n    }\n  }\n\n  const onMouseOutHole = () => {\n    if (!interactive) return\n    setSelectedHole(null)\n  }\n\n  const onSelectMarble = location => () => {\n    if (!interactive) return\n    if (selectedMarble && selectedMarble.sameAs(location)) {\n      setSelectedMarble(null)\n      setAvailableHoles([])\n    } else {\n      const fromLocation = location\n      const validActionIndices = validateManualMove({ fromLocation })\n      if (validActionIndices.length) {\n        setSelectedMarble(location)\n        setAvailableHoles(validActionIndices.map(validActionIndex => rl.ACTIONS[validActionIndex].toLocation))\n      } else {\n        setSelectedMarble(null)\n        setAvailableHoles([])\n      }\n    }\n  }\n\n  const locationToCircleCentre = location => [\n    GRID_X + GRID_X * location.col,\n    GRID_Y + GRID_Y * location.row\n  ]\n\n  const renderHoles = () => {\n    return rl.LOCATIONS.map(location => {\n      const [cx, cy] = locationToCircleCentre(location)\n      const classNames = ['board-hole']\n      if (availableHoles.find(availableHole => availableHole.sameAs(location))) {\n        classNames.push('board-hole--available')\n      }\n      if (selectedHole && selectedHole.sameAs(location)) {\n        classNames.push('board-hole--selected')\n      }\n      const props = {\n        key: `hole-${location.key}`,\n        cx,\n        cy,\n        r: HOLE_RADIUS,\n        className: classNames.join(' '),\n        onClick: onSelectHole(location),\n        onMouseOver: onMouseOverHole(location),\n        onMouseOut: onMouseOutHole\n      }\n      return <circle {...props} />\n    })\n  }\n\n  const renderMarbles = () => {\n    const occupiedEntries = entries.filter(([, isOccupied]) => isOccupied)\n    return occupiedEntries.map(([location]) => {\n      if (action) {\n        const startLocation = undo ? action.toLocation : action.fromLocation\n        const endLocation = undo ? action.fromLocation : action.toLocation\n        if (location.sameAs(endLocation)) {\n          return renderFromToMarble(startLocation, endLocation)\n        }\n        if (undo && location.sameAs(action.viaLocation)) {\n          return null\n        }\n      }\n      return renderStaticMarble(location)\n    })\n  }\n\n  const renderStaticMarble = location => {\n    const [cx, cy] = locationToCircleCentre(location)\n    const angle = randomRotations.get(location.key)\n    const props = {\n      key: location.key,\n      cx,\n      cy,\n      r: MARBLE_RADIUS,\n      className: 'board-marble',\n      onClick: onSelectMarble(location)\n    }\n    const style = {\n      transform: makeTransformStyle(angle),\n      transformOrigin: makeTransformOriginStyle(cx, cy)\n    }\n    return <circle {...props} style={style} />\n  }\n\n  const renderViaMarble = () => {\n    if (!action) return null\n    // TODO: introduce hideMarble/setHideMarble state ?\n    if (!undo && !showViaMarble) return null\n    const viaLocation = action.viaLocation\n    const [cx, cy] = locationToCircleCentre(viaLocation)\n    const angle = randomRotations.get(viaLocation.key)\n    const maybeOnClick = undo\n      ? { onClick: onSelectMarble(viaLocation) }\n      : undefined\n    const props = {\n      cx,\n      cy,\n      r: MARBLE_RADIUS,\n      className: 'board-marble',\n      ...maybeOnClick\n    }\n    const style = {\n      transform: makeTransformStyle(angle),\n      transformOrigin: makeTransformOriginStyle(cx, cy)\n    }\n    return (\n      <Spring\n        key={viaLocation.key}\n        config={{ duration: 300, delay: 300 }}\n        from={{ opacity: undo ? 0 : 1 }}\n        to={{ opacity: undo ? 1 : 0 }}\n        onRest={() => setShowViaMarble(false)}\n      >\n        {springProps => <circle {...props} style={{ ...style, ...springProps }} />}\n      </Spring>\n    )\n  }\n\n  const renderFromToMarble = (startLocation, endLocation) => {\n    const [cxFrom, cyFrom] = locationToCircleCentre(startLocation)\n    const [cxTo, cyTo] = locationToCircleCentre(endLocation)\n    const angleFrom = randomRotations.get(startLocation.key)\n    const angleTo = randomRotations.get(endLocation.key)\n    const props = {\n      cx: cxFrom,\n      cy: cyFrom,\n      r: MARBLE_RADIUS,\n      className: 'board-marble',\n      onClick: onSelectMarble(endLocation)\n    }\n    return (\n      <Spring\n        key={endLocation.key}\n        config={{ duration: 600 }}\n        from={{\n          cx: cxFrom,\n          cy: cyFrom,\n          transform: makeTransformStyle(angleFrom),\n          transformOrigin: makeTransformOriginStyle(cxFrom, cyFrom)\n        }}\n        to={{\n          cx: cxTo,\n          cy: cyTo,\n          transform: makeTransformStyle(angleTo),\n          transformOrigin: makeTransformOriginStyle(cxTo, cyTo)\n        }}\n      >\n        {springProps => <circle {...props} style={springProps} />}\n      </Spring>\n    )\n  }\n\n  const renderMarbleHighlight = () => {\n    if (!selectedMarble) return null\n    const [cx, cy] = locationToCircleCentre(selectedMarble)\n    const props = {\n      cx,\n      cy,\n      r: MARBLE_HIGHLIGHT_RADIUS,\n      className: 'board-marble-highlight'\n    }\n    return <circle {...props} />\n  }\n\n  return (\n    <div>\n      <svg className=\"board\" viewBox=\"0 0 100 100\">\n        <defs>\n          <pattern id=\"board\" height=\"100%\" width=\"100%\" patternContentUnits=\"objectBoundingBox\">\n            <image href=\"images/board.jpeg\" preserveAspectRatio=\"none\" width=\"1\" height=\"1\" />\n          </pattern>\n          <pattern id=\"marble\" height=\"100%\" width=\"100%\" patternContentUnits=\"objectBoundingBox\">\n            <image href=\"images/marble.png\" preserveAspectRatio=\"none\" width=\"1\" height=\"1\" />\n          </pattern>\n        </defs>\n        <rect className=\"board-background\"></rect>\n        {renderHoles()}\n        {renderViaMarble()}\n        {renderMarbles()}\n        {renderMarbleHighlight()}\n      </svg>\n    </div>\n  )\n}\n\nBoard.propTypes = {\n  resetBoard: PropTypes.bool.isRequired,\n  entries: PropTypes.array.isRequired,\n  action: PropTypes.object,\n  undo: PropTypes.bool,\n  interactive: PropTypes.bool,\n  validateManualMove: PropTypes.func,\n  makeManualMove: PropTypes.func\n}\n\nexport default Board\n","import { useCallback, useEffect, useState } from 'react'\nimport Board from './Board'\nimport * as rl from './solitaire-rl/index.mjs'\nimport './ManualPlayView.css'\n\nconst ManualPlayView = () => {\n\n  const [env] = useState(() => new rl.SolitaireEnv())\n  const [resetBoard, setResetBoard] = useState(true)\n  const [entries, setEntries] = useState([])\n  const [action, setAction] = useState(null)\n  const [undo, setUndo] = useState(false)\n  const [actions, setActions] = useState([])\n  const [finalReward, setFinalReward] = useState(null)\n\n  const onReset = useCallback(() => {\n    env.reset()\n    setResetBoard(true)\n    setEntries(env.entries())\n    setAction(null)\n    setUndo(false)\n    setActions([])\n    setFinalReward(null)\n  }, [env])\n\n  useEffect(onReset, [onReset])\n\n  const onUndo = () => {\n    const [actionIndex] = actions.slice(-1)\n    env.undo(actionIndex)\n    setEntries(env.entries())\n    setAction(rl.ACTIONS[actionIndex])\n    setUndo(true)\n    setActions(actions => actions.slice(0, -1))\n    setFinalReward(null)\n  }\n\n  const validateManualMove = ({ fromLocation, toLocation }) => {\n    const validActionIndices = env.validActions()\n    return validActionIndices.filter(actionIndex => {\n      const action = rl.ACTIONS[actionIndex]\n      const fromLocationCheck = fromLocation ? action.fromLocation.sameAs(fromLocation) : true\n      const toLocationCheck = toLocation ? action.toLocation.sameAs(toLocation) : true\n      return fromLocationCheck && toLocationCheck\n    })\n  }\n\n  const makeManualMove = actionIndex => {\n    const [, reward, done] = env.step(actionIndex)\n    setResetBoard(false)\n    setEntries(env.entries())\n    setAction(rl.ACTIONS[actionIndex])\n    setUndo(false)\n    setActions(actions => actions.concat(actionIndex))\n    if (done) {\n      setFinalReward(reward)\n    }\n  }\n\n  return (\n    <div className=\"agent-play-content\">\n      <div className=\"board-wrapper\">\n        <Board\n          resetBoard={resetBoard}\n          entries={entries}\n          action={action}\n          undo={undo}\n          interactive={true}\n          validateManualMove={validateManualMove}\n          makeManualMove={makeManualMove}\n        />\n\n        <div className=\"board-controls-below\">\n          <div>\n            <button type=\"button\" onClick={onReset}>Reset</button>\n            <button type=\"button\" onClick={onUndo} disabled={actions.length === 0}>Undo</button>\n          </div>\n          {finalReward !== null && <div>Final Reward: {finalReward}</div>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ManualPlayView\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport Alert from 'react-bootstrap/Alert'\nimport Board from './Board'\nimport * as rl from './solitaire-rl/index.mjs'\nimport './AgentPlayView.css'\n\nconst modelPath = 'model/model.json'\n\nconst useQuery = () => new URLSearchParams(useLocation().search)\n\nconst AgentPlayView = () => {\n\n  const query = useQuery()\n  const [selectedAgent, setSelectedAgent] = useState(() => query.get('agent') || 'random')\n  const [agent, setAgent] = useState(null)\n  const [resetBoard, setResetBoard] = useState(true)\n  const [entries, setEntries] = useState(agent?.entries() ?? [])\n  const [action, setAction] = useState(null)\n  const [running, setRunning] = useState(false)\n  const [fetchingModel, setFetchingModel] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [finalReward, setFinalReward] = useState(null)\n\n  const runTimerRef = useRef(null)\n\n  console.log(`errorMessage: ${errorMessage}`)\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return () => clearInterval(runTimerRef.current)\n  }, [])\n\n  useEffect(() => makeAgent(selectedAgent), [selectedAgent])\n\n  const onStep = () => {\n    const stepResult = agent.step()\n    setResetBoard(false)\n    setEntries(stepResult.entries)\n    setAction(stepResult.action)\n    if (stepResult.done) {\n      setFinalReward(stepResult.reward)\n    }\n  }\n\n  const onRun = () => {\n    setRunning(true)\n    onStep()\n    runTimerRef.current = setInterval(() => {\n      if (agent.done) {\n        clearInterval(runTimerRef.current)\n        setRunning(false)\n      } else {\n        onStep()\n      }\n    }, 1000)\n  }\n\n  const onStop = () => {\n    clearInterval(runTimerRef.current)\n    setRunning(false)\n  }\n\n  const onReset = useCallback(() => {\n    if (agent) {\n      agent.reset()\n      setResetBoard(true)\n      setEntries(agent.entries())\n      setAction(null)\n      setFinalReward(null)\n    }\n  }, [agent])\n\n  useEffect(onReset, [onReset])\n\n  const makeAgent = async agentName => {\n    switch (agentName) {\n\n      case 'trained': {\n        setFetchingModel(true)\n        try {\n          setErrorMessage(null)\n          const agent = await rl.makeTrainedAgentFromModelPath(modelPath)\n          setAgent(agent)\n        } catch (error) {\n          setErrorMessage(error.message)\n          setSelectedAgent('random')\n        } finally {\n          setFetchingModel(false)\n        }\n        break\n      }\n\n      case 'random':\n      default: {\n        const agent = rl.makeRandomAgent()\n        setAgent(agent)\n        break\n      }\n    }\n  }\n\n  const onChangeSelectedAgent = e =>\n    setSelectedAgent(e.target.value)\n\n  return (\n    <div className=\"agent-play-content\">\n      <div className=\"board-wrapper\">\n\n        <div className=\"board-controls-above\">\n          <select value={selectedAgent} onChange={onChangeSelectedAgent} disabled={running || fetchingModel}>\n            <option value=\"random\">Random Agent</option>\n            <option value=\"trained\">Trained Agent</option>\n          </select>\n        </div>\n\n        <Board\n          resetBoard={resetBoard}\n          entries={entries}\n          action={action}\n          interactive={false}\n        />\n\n        <div className=\"board-controls-below\">\n          <div>\n            <button type=\"button\" disabled={agent === null || agent.done || running} onClick={onStep}>Step</button>\n            {running\n              ? <button type=\"button\" onClick={onStop}>Stop</button>\n              : <button type=\"button\" disabled={agent === null || agent.done} onClick={onRun}>Run</button>\n            }\n            <button type=\"button\" disabled={agent === null || running} onClick={onReset}>Reset</button>\n          </div>\n          {finalReward !== null && <div>Final Reward: {finalReward}</div>}\n        </div>\n\n      </div>\n\n      {\n        errorMessage && (\n          <div className=\"alert-wrapper\">\n            <Alert transition={false} variant=\"danger\" dismissible onClose={() => setErrorMessage(null)}>\n              {errorMessage}\n            </Alert>\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default AgentPlayView\n","import { useRef, useState } from 'react'\n\nexport const usePerSecondCounter = () => {\n\n  const [prevTime, setPrevTime] = useState(0)\n  const [frameCount, setFrameCount] = useState(0)\n  const [fps, setFps] = useState(0)\n\n  const increment = () => {\n    const newFrameCount = frameCount + 1\n    setFrameCount(newFrameCount)\n    const now = performance.now()\n    const delta = now - prevTime\n    if (delta >= 1000) {\n      setFps(newFrameCount * 1000 / delta)\n      setPrevTime(now)\n      setFrameCount(0)\n    }\n  }\n\n  const reset = () => {\n    setPrevTime(performance.now())\n    setFrameCount(0)\n    setFps(0)\n  }\n\n  return [fps, increment, reset]\n}\n\nexport const useElapsedTime = () => {\n\n  const [start, setStart] = useState(0)\n  const [elapsed, setElapsed] = useState(0)\n\n  const update = () => {\n    const now = performance.now()\n    setElapsed(now - start)\n  }\n\n  const reset = () => {\n    setStart(performance.now())\n    setElapsed(0)\n  }\n\n  return [elapsed, update, reset]\n}\n\nexport const useCallbackWrapper = cb => {\n  const cbRef = useRef(null)\n  cbRef.current = cb\n  const cbWrapper = (...args) => {\n    if (cbRef.current) {\n      return cbRef.current(...args)\n    }\n  }\n  return cbWrapper\n}\n","import { useEffect, useRef, useState } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport * as tfvis from '@tensorflow/tfjs-vis'\nimport { useElapsedTime, usePerSecondCounter, useCallbackWrapper } from './customHooks'\nimport Board from './Board'\nimport * as rl from './solitaire-rl/index.mjs'\nimport * as U from './solitaire-rl/utils.mjs'\nimport './TrainingView.css'\n\nconst TrainingView = () => {\n\n  const [selectedEndCondition, setSelectedEndCondition] = useState(\"endCondition1\")\n  const [training, setTraining] = useState(false)\n  const [trainingOutcome, setTrainingOutcome] = useState(0)\n  const [cancelled, setCancelled] = useState(false)\n  const [stats, setStats] = useState(null)\n  const [chartVisible, setChartVisible] = useState(false)\n  const [movingAverageAvailable, setMovingAverageAvailable] = useState(false)\n  const [showBoard, setShowBoard] = useState(false)\n  const [entries, setEntries] = useState([])\n\n  const chartElementRef = useRef()\n  const chartValuesRef = useRef([[], []])\n\n  const [elapsedTime, updateTimer, resetTimer] = useElapsedTime()\n  const [eps, updateEps, resetEps] = usePerSecondCounter()\n\n  const onTrainingSuccess = (model, actions) => {\n    let agent\n    switch (selectedEndCondition) {\n      case 'endCondition0':\n        agent = rl.makeHardcodedActionsAgent(actions)\n        break\n      case 'endCondition1':\n      default:\n        agent = rl.makeTrainedAgentFromModel(model, 0)\n        break\n      case 'endCondition2':\n        agent = rl.makeTrainedAgentFromModel(model, 1)\n        break\n    }\n\n    const agentActions = []\n    while (!agent.done) {\n      const { actionIndex } = agent.step()\n      agentActions.push(actionIndex)\n    }\n    console.log(`agentActions: ${JSON.stringify(agentActions)}`)\n\n    setTrainingOutcome(1)\n    setShowBoard(true)\n    setEntries(agent.entries())\n  }\n\n  const onTrainingFailure = model => {\n    setTrainingOutcome(2)\n  }\n\n  const onProgress = stats => {\n    setStats(stats)\n    updateTimer()\n    updateEps()\n  }\n\n  const onCheckCancelled = () => cancelled\n\n  const onTrainingSuccessCallbackWrapper = useCallbackWrapper(onTrainingSuccess)\n  const onTrainingFailureCallbackWrapper = useCallbackWrapper(onTrainingFailure)\n  const onProgressCallbackWrapper = useCallbackWrapper(onProgress)\n  const onCheckCancelledCallbackWrapper = useCallbackWrapper(onCheckCancelled)\n\n  const resetChartValues = () => {\n    chartValuesRef.current = [[], []]\n  }\n\n  const showChart = () => {\n    const data = {\n      values: chartValuesRef.current,\n      series: ['Last', 'Best']\n    }\n    const opts = {\n      zoomToFit: true,\n      height: 300,\n      xLabel: 'Episode',\n      yLabel: 'Final Reward (moving average)',\n      seriesColors: ['blue', 'red']\n    }\n    tfvis.render.linechart(chartElementRef.current, data, opts)\n  }\n\n  useEffect(() => {\n    if (stats) {\n      if (stats.finalRewardMA !== Number.NEGATIVE_INFINITY) {\n        setMovingAverageAvailable(true)\n        const x = stats.episode\n        const [lastValues, bestValues] = chartValuesRef.current\n        lastValues.push({ x, y: stats.finalRewardMA })\n        bestValues.push({ x, y: stats.bestFinalRewardMA })\n        if (chartVisible) {\n          showChart()\n        }\n      }\n    }\n  }, [stats, chartVisible])\n\n  const onTrain = async () => {\n    try {\n      if (training) return\n      setTraining(true)\n      setTrainingOutcome(0)\n      setCancelled(false)\n      resetTimer()\n      resetEps()\n      setChartVisible(false)\n      resetChartValues()\n      setMovingAverageAvailable(false)\n      setShowBoard(false)\n      setEntries([])\n\n      const callbacks = {\n        trainingSuccess: onTrainingSuccessCallbackWrapper,\n        trainingFailure: onTrainingFailureCallbackWrapper,\n        progress: onProgressCallbackWrapper,\n        checkCancelled: onCheckCancelledCallbackWrapper\n      }\n\n      await rl.train(selectedEndCondition, callbacks)\n\n      resetEps()\n      setChartVisible(true)\n    } finally {\n      setTraining(false)\n    }\n  }\n\n  const onCancel = () => {\n    setCancelled(true)\n    resetEps()\n    setChartVisible(true)\n  }\n\n  const onShowChart = () => {\n    setChartVisible(true)\n  }\n\n  const onHideChart = () => {\n    setChartVisible(false)\n  }\n\n  const onChangeSelectedFred = e =>\n    setSelectedEndCondition(e.target.value)\n\n  const getBackgroundClass = () => {\n    switch (trainingOutcome) {\n      case 0:\n      default:\n        return ''\n      case 1:\n        return 'bg-success'\n      case 2:\n        return 'bg-danger'\n    }\n  }\n\n  return (\n    <div className=\"training-content\">\n      <div className=\"training-content-inner\">\n        <div className=\"training-warning\">\n          NOTE: currently, training doesn't always work! I aim to make it more reliable.\n          </div>\n        <div>\n          Stop training when:\n          <select value={selectedEndCondition} onChange={onChangeSelectedFred} disabled={training}>\n            <option value=\"endCondition0\">First solution is found</option>\n            <option value=\"endCondition1\">Greedy policy solves puzzle</option>\n            <option value=\"endCondition2\">Greedy policy solves puzzle for all first moves</option>\n          </select>\n        </div>\n        <div className=\"training-controls\">\n          <div className=\"training-controls-left\">\n            {\n              training\n                ? <button onClick={onCancel}>Cancel</button>\n                : <button onClick={onTrain}>Train</button>\n            }\n            {\n              stats && (\n                chartVisible\n                  ? <button disabled={!movingAverageAvailable} onClick={onHideChart}>Hide Chart</button>\n                  : <button disabled={!movingAverageAvailable} onClick={onShowChart}>Show Chart</button>\n              )\n            }\n          </div>\n          <div className=\"training-controls-right\">\n            {stats && <div className=\"training-timer\">{U.formatElapsedTime(elapsedTime)}</div>}\n          </div>\n        </div>\n        {stats && (\n          <Table className={getBackgroundClass()} size=\"sm\">\n            <tbody>\n              <tr>\n                <td className=\"training-stats-label\">Episode</td>\n                <td className=\"training-stats-value\">{stats.episode}</td>\n              </tr>\n              <tr>\n                <td className=\"training-stats-label\">Episodes per second</td>\n                <td className=\"training-stats-value\">{eps.toFixed(2)}</td>\n              </tr>\n              <tr>\n                <td className=\"training-stats-label\">&epsilon;</td>\n                <td className=\"training-stats-value\">{stats.epsilon.toFixed(5)}</td>\n              </tr>\n              <tr>\n                <td className=\"training-stats-label\">Last Final Reward</td>\n                <td className=\"training-stats-value\">{stats.finalReward}</td>\n              </tr>\n              <tr>\n                <td className=\"training-stats-label\">Best Final Reward</td>\n                <td className=\"training-stats-value\">{stats.bestFinalReward}</td>\n              </tr>\n              <tr>\n                <td className=\"training-stats-label\">Last Final Reward (MA)</td>\n                <td className=\"training-stats-value\">{stats.finalRewardMA.toFixed(3)}</td>\n              </tr>\n              <tr>\n                <td className=\"training-stats-label\">Best Final Reward (MA)</td>\n                <td className=\"training-stats-value\">{stats.bestFinalRewardMA.toFixed(3)}</td>\n              </tr>\n            </tbody>\n          </Table>\n        )}\n        {chartVisible && <div ref={chartElementRef} className=\"training-stats-chart\" />}\n        {showBoard && <Board resetBoard={false} entries={entries} interactive={false} />}\n      </div>\n    </div>\n  )\n}\n\nexport default TrainingView\n","import { version } from '../package.json'\nimport './Version.css'\n\nconst Version = () =>\n  <div className=\"version\">version: {version}</div>\n\nexport default Version\n","import { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\nimport Navigation from './Navigation'\nimport ManualPlayView from './ManualPlayView'\nimport AgentPlayView from './AgentPlayView'\nimport TrainingView from './TrainingView'\nimport Version from './Version'\nimport { ROUTES } from './routes'\nimport './App.css'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"app-layout\">\n        <Navigation />\n        <div className=\"app-layout-content\">\n          <Switch>\n            <Route path={ROUTES.manualPlayView}>\n              <ManualPlayView />\n            </Route>\n            <Route path={ROUTES.agentPlayView}>\n              <AgentPlayView />\n            </Route>\n            <Route path={ROUTES.trainingView}>\n              <TrainingView />\n            </Route>\n            <Route path={ROUTES.home}>\n              <Redirect to={ROUTES.agentPlayView} />\n            </Route>\n          </Switch>\n        </div>\n        <Version />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}